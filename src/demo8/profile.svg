<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="774" onload="init(evt)" viewBox="0 0 1200 774" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="757"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="757"> </text>
<g id="frames">
<g>
<title>all (9,762 samples, 100.00%)</title><rect x="10.0" y="723.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="734.0">all</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (5 samples, 0.05%)</title><rect x="10.2" y="707.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.2" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (5 samples, 0.05%)</title><rect x="10.2" y="691.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.2" y="702.0"></text>
</g>
<g>
<title>__memset_sse2 (5 samples, 0.05%)</title><rect x="10.2" y="675.0" width="0.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.2" y="686.0"></text>
</g>
<g>
<title>[deoptimization] (6 samples, 0.06%)</title><rect x="11.1" y="707.0" width="0.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="14.1" y="718.0"></text>
</g>
<g>
<title>Deoptimization::fetch_unroll_info(JavaThread*) (4 samples, 0.04%)</title><rect x="11.1" y="691.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="14.1" y="702.0"></text>
</g>
<g>
<title>Deoptimization::fetch_unroll_info_helper(JavaThread*) (4 samples, 0.04%)</title><rect x="11.1" y="675.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="14.1" y="686.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.05%)</title><rect x="11.8" y="707.0" width="0.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="14.8" y="718.0"></text>
</g>
<g>
<title>_int_malloc (3 samples, 0.03%)</title><rect x="11.9" y="691.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="14.9" y="702.0"></text>
</g>
<g>
<title>demo8/FileConverter3.main (5,265 samples, 53.93%)</title><rect x="13.3" y="707.0" width="636.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="16.3" y="718.0">demo8/FileConverter3.main</text>
</g>
<g>
<title>demo8/FileConverter3.convertFile (5,265 samples, 53.93%)</title><rect x="13.3" y="691.0" width="636.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="16.3" y="702.0">demo8/FileConverter3.convertFile</text>
</g>
<g>
<title>demo8/FileConverter3.convertList (5,262 samples, 53.90%)</title><rect x="13.3" y="675.0" width="636.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.3" y="686.0">demo8/FileConverter3.convertList</text>
</g>
<g>
<title>java/util/Collection.stream (8 samples, 0.08%)</title><rect x="13.9" y="659.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.9" y="670.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (7 samples, 0.07%)</title><rect x="14.0" y="643.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.0" y="654.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (3 samples, 0.03%)</title><rect x="14.0" y="627.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="17.0" y="638.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.&lt;clinit&gt; (4 samples, 0.04%)</title><rect x="14.4" y="627.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.4" y="638.0"></text>
</g>
<g>
<title>java/util/Comparator.comparingInt (7 samples, 0.07%)</title><rect x="14.8" y="659.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.8" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandleNatives.linkCallSite (5 samples, 0.05%)</title><rect x="14.8" y="643.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="17.8" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandleNatives.linkCallSiteImpl (5 samples, 0.05%)</title><rect x="14.8" y="627.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.8" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/CallSite.makeSite (4 samples, 0.04%)</title><rect x="14.8" y="611.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.8" y="622.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/999966131.invoke_MT (3 samples, 0.03%)</title><rect x="14.8" y="595.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="17.8" y="606.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.&lt;clinit&gt; (3 samples, 0.03%)</title><rect x="15.7" y="659.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="18.7" y="670.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.toList (5 samples, 0.05%)</title><rect x="16.0" y="659.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.0" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (5,232 samples, 53.60%)</title><rect x="16.6" y="659.0" width="632.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="19.6" y="670.0">java/util/stream/ReferencePipeline.collect</text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (5,231 samples, 53.59%)</title><rect x="16.8" y="643.0" width="632.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.8" y="654.0">java/util/stream/AbstractPipeline.evaluate</text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (5,231 samples, 53.59%)</title><rect x="16.8" y="627.0" width="632.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="19.8" y="638.0">java/util/stream/ReduceOps$ReduceOp.evaluateSequential</text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (5,230 samples, 53.58%)</title><rect x="16.8" y="611.0" width="632.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.8" y="622.0">java/util/stream/AbstractPipeline.wrapAndCopyInto</text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (5,228 samples, 53.55%)</title><rect x="16.8" y="595.0" width="631.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.8" y="606.0">java/util/stream/AbstractPipeline.copyInto</text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (5,228 samples, 53.55%)</title><rect x="16.8" y="579.0" width="631.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="19.8" y="590.0">java/util/stream/AbstractPipeline.copyIntoWithCancel</text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (2,295 samples, 23.51%)</title><rect x="16.8" y="563.0" width="277.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="19.8" y="574.0">java/util/stream/ReferencePipeline.fo..</text>
</g>
<g>
<title>java/util/ArrayList$ArrayListSpliterator.tryAdvance (2,252 samples, 23.07%)</title><rect x="18.8" y="547.0" width="272.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.8" y="558.0">java/util/ArrayList$ArrayListSpliter..</text>
</g>
<g>
<title>java/util/ArrayList$ArrayListSpliterator.getFence (4 samples, 0.04%)</title><rect x="22.3" y="531.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="25.3" y="542.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (2,218 samples, 22.72%)</title><rect x="22.9" y="531.0" width="268.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="25.9" y="542.0">java/util/stream/ReferencePipeline$3..</text>
</g>
<g>
<title>demo8/FileConverter3$$Lambda$2/1078694789.apply (465 samples, 4.76%)</title><rect x="25.2" y="515.0" width="56.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="28.2" y="526.0">demo8/..</text>
</g>
<g>
<title>demo8/FileConverter3$Entry.&lt;init&gt; (394 samples, 4.04%)</title><rect x="33.8" y="499.0" width="47.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="36.8" y="510.0">demo..</text>
</g>
<g>
<title>java/lang/Integer.parseInt (210 samples, 2.15%)</title><rect x="35.4" y="483.0" width="25.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="38.4" y="494.0">j..</text>
</g>
<g>
<title>java/lang/Integer.parseInt (210 samples, 2.15%)</title><rect x="35.4" y="467.0" width="25.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="38.4" y="478.0">j..</text>
</g>
<g>
<title>java/lang/Character.digit (71 samples, 0.73%)</title><rect x="44.8" y="451.0" width="8.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="47.8" y="462.0"></text>
</g>
<g>
<title>java/lang/Character.digit (71 samples, 0.73%)</title><rect x="44.8" y="435.0" width="8.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="47.8" y="446.0"></text>
</g>
<g>
<title>java/lang/CharacterData.of (18 samples, 0.18%)</title><rect x="44.8" y="419.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="47.8" y="430.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.digit (53 samples, 0.54%)</title><rect x="47.0" y="419.0" width="6.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="50.0" y="430.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (6 samples, 0.06%)</title><rect x="52.7" y="403.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="55.7" y="414.0"></text>
</g>
<g>
<title>java/lang/String.charAt (60 samples, 0.61%)</title><rect x="53.4" y="451.0" width="7.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="56.4" y="462.0"></text>
</g>
<g>
<title>jshort_arraycopy (11 samples, 0.11%)</title><rect x="55.4" y="435.0" width="1.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="58.4" y="446.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (32 samples, 0.33%)</title><rect x="56.8" y="435.0" width="3.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="59.8" y="446.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (49 samples, 0.50%)</title><rect x="60.8" y="483.0" width="5.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="63.8" y="494.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (48 samples, 0.49%)</title><rect x="60.9" y="467.0" width="5.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="63.9" y="478.0"></text>
</g>
<g>
<title>java/lang/String.substring (122 samples, 1.25%)</title><rect x="66.7" y="483.0" width="14.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="69.7" y="494.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (48 samples, 0.49%)</title><rect x="73.5" y="467.0" width="5.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="76.5" y="478.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (36 samples, 0.37%)</title><rect x="74.8" y="451.0" width="4.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="77.8" y="462.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (18 samples, 0.18%)</title><rect x="79.3" y="467.0" width="2.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="82.3" y="478.0"></text>
</g>
<g>
<title>java/util/stream/DistinctOps$1$2.accept (1,734 samples, 17.76%)</title><rect x="81.4" y="515.0" width="209.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="84.4" y="526.0">java/util/stream/DistinctOp..</text>
</g>
<g>
<title>java/util/HashSet.add (651 samples, 6.67%)</title><rect x="84.7" y="499.0" width="78.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="87.7" y="510.0">java/util..</text>
</g>
<g>
<title>java/util/HashMap.put (641 samples, 6.57%)</title><rect x="85.3" y="483.0" width="77.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="88.3" y="494.0">java/util..</text>
</g>
<g>
<title>java/util/HashMap.hash (26 samples, 0.27%)</title><rect x="85.9" y="467.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="88.9" y="478.0"></text>
</g>
<g>
<title>demo8/FileConverter3$Entry.hashCode (14 samples, 0.14%)</title><rect x="87.4" y="451.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="90.4" y="462.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (13 samples, 0.13%)</title><rect x="87.5" y="435.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="90.5" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (610 samples, 6.25%)</title><rect x="89.1" y="467.0" width="73.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="92.1" y="478.0">java/uti..</text>
</g>
<g>
<title>demo8/FileConverter3$Entry.equals (3 samples, 0.03%)</title><rect x="95.7" y="451.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="98.7" y="462.0"></text>
</g>
<g>
<title>java/lang/String.endsWith (3 samples, 0.03%)</title><rect x="95.7" y="435.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="98.7" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (23 samples, 0.24%)</title><rect x="96.3" y="451.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="99.3" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap$Node.&lt;init&gt; (11 samples, 0.11%)</title><rect x="97.8" y="435.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="100.8" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (527 samples, 5.40%)</title><rect x="99.1" y="451.0" width="63.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="102.1" y="462.0">java/ut..</text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (4 samples, 0.04%)</title><rect x="161.9" y="435.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="164.9" y="446.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (4 samples, 0.04%)</title><rect x="161.9" y="419.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="164.9" y="430.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle, methodHandle, int, int, CompLevel, nmethod*, JavaThread*) (4 samples, 0.04%)</title><rect x="161.9" y="403.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="164.9" y="414.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::method_back_branch_event(methodHandle, methodHandle, int, CompLevel, nmethod*, JavaThread*) (4 samples, 0.04%)</title><rect x="161.9" y="387.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="164.9" y="398.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::compile(methodHandle, int, CompLevel, JavaThread*) [clone .part.24] (3 samples, 0.03%)</title><rect x="162.1" y="371.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="165.1" y="382.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::submit_compile(methodHandle, int, CompLevel, JavaThread*) (3 samples, 0.03%)</title><rect x="162.1" y="355.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="165.1" y="366.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle, int, int, methodHandle, int, char const*, Thread*) (3 samples, 0.03%)</title><rect x="162.1" y="339.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="165.1" y="350.0"></text>
</g>
<g>
<title>CompileBroker::compile_method_base(methodHandle, int, int, methodHandle, int, char const*, Thread*) (3 samples, 0.03%)</title><rect x="162.1" y="323.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="165.1" y="334.0"></text>
</g>
<g>
<title>__pthread_cond_signal (3 samples, 0.03%)</title><rect x="162.1" y="307.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="165.1" y="318.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.03%)</title><rect x="162.1" y="291.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="165.1" y="302.0"></text>
</g>
<g>
<title>do_syscall_64 (3 samples, 0.03%)</title><rect x="162.1" y="275.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="165.1" y="286.0"></text>
</g>
<g>
<title>sys_futex (3 samples, 0.03%)</title><rect x="162.1" y="259.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="165.1" y="270.0"></text>
</g>
<g>
<title>do_futex (3 samples, 0.03%)</title><rect x="162.1" y="243.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="165.1" y="254.0"></text>
</g>
<g>
<title>wake_up_q (3 samples, 0.03%)</title><rect x="162.1" y="227.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="165.1" y="238.0"></text>
</g>
<g>
<title>try_to_wake_up (3 samples, 0.03%)</title><rect x="162.1" y="211.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="165.1" y="222.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (3 samples, 0.03%)</title><rect x="162.1" y="195.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="165.1" y="206.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 0.05%)</title><rect x="162.8" y="483.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="165.8" y="494.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (997 samples, 10.21%)</title><rect x="163.4" y="499.0" width="120.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="166.4" y="510.0">java/util/HashS..</text>
</g>
<g>
<title>java/util/HashMap.containsKey (995 samples, 10.19%)</title><rect x="163.6" y="483.0" width="120.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="166.6" y="494.0">java/util/HashM..</text>
</g>
<g>
<title>java/util/HashMap.getNode (913 samples, 9.35%)</title><rect x="163.9" y="467.0" width="110.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="166.9" y="478.0">java/util/Has..</text>
</g>
<g>
<title>demo8/FileConverter3$Entry.equals (99 samples, 1.01%)</title><rect x="262.3" y="451.0" width="11.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="265.3" y="462.0"></text>
</g>
<g>
<title>java/lang/String.endsWith (31 samples, 0.32%)</title><rect x="270.5" y="435.0" width="3.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="273.5" y="446.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (19 samples, 0.19%)</title><rect x="271.9" y="419.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="274.9" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (80 samples, 0.82%)</title><rect x="274.2" y="467.0" width="9.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="277.2" y="478.0"></text>
</g>
<g>
<title>demo8/FileConverter3$Entry.hashCode (74 samples, 0.76%)</title><rect x="275.0" y="451.0" width="8.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="278.0" y="462.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (73 samples, 0.75%)</title><rect x="275.1" y="435.0" width="8.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="278.1" y="446.0"></text>
</g>
<g>
<title>java/util/stream/SliceOps$1$1.accept (59 samples, 0.60%)</title><rect x="283.9" y="499.0" width="7.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="286.9" y="510.0"></text>
</g>
<g>
<title>java/util/stream/SortedOps$RefSortingSink.accept (43 samples, 0.44%)</title><rect x="285.8" y="483.0" width="5.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="288.8" y="494.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (40 samples, 0.41%)</title><rect x="286.2" y="467.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="289.2" y="478.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureCapacityInternal (33 samples, 0.34%)</title><rect x="287.0" y="451.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="290.0" y="462.0"></text>
</g>
<g>
<title>java/util/ArrayList.calculateCapacity (4 samples, 0.04%)</title><rect x="287.3" y="435.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="290.3" y="446.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureExplicitCapacity (27 samples, 0.28%)</title><rect x="287.8" y="435.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="290.8" y="446.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (13 samples, 0.13%)</title><rect x="289.5" y="419.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="292.5" y="430.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (13 samples, 0.13%)</title><rect x="289.5" y="403.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="292.5" y="414.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (13 samples, 0.13%)</title><rect x="289.5" y="387.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="292.5" y="398.0"></text>
</g>
<g>
<title>new_object_array Runtime1 stub (3 samples, 0.03%)</title><rect x="289.8" y="371.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="292.8" y="382.0"></text>
</g>
<g>
<title>oop_disjoint_arraycopy (7 samples, 0.07%)</title><rect x="290.2" y="371.0" width="0.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="293.2" y="382.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.cancellationRequested (26 samples, 0.27%)</title><rect x="291.0" y="547.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="294.0" y="558.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.cancellationRequested (16 samples, 0.16%)</title><rect x="292.2" y="531.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="295.2" y="542.0"></text>
</g>
<g>
<title>java/util/stream/SliceOps$1$1.cancellationRequested (9 samples, 0.09%)</title><rect x="293.1" y="515.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="296.1" y="526.0"></text>
</g>
<g>
<title>java/util/stream/SortedOps$AbstractRefSortingSink.cancellationRequested (3 samples, 0.03%)</title><rect x="293.8" y="499.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="296.8" y="510.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (2,933 samples, 30.05%)</title><rect x="294.2" y="563.0" width="354.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="297.2" y="574.0">java/util/stream/Sink$ChainedReference.end</text>
</g>
<g>
<title>java/util/stream/DistinctOps$1$2.end (2,933 samples, 30.05%)</title><rect x="294.2" y="547.0" width="354.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="297.2" y="558.0">java/util/stream/DistinctOps$1$2.end</text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (2,933 samples, 30.05%)</title><rect x="294.2" y="531.0" width="354.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="297.2" y="542.0">java/util/stream/Sink$ChainedReference.end</text>
</g>
<g>
<title>java/util/stream/SortedOps$RefSortingSink.end (2,933 samples, 30.05%)</title><rect x="294.2" y="515.0" width="354.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="297.2" y="526.0">java/util/stream/SortedOps$RefSortingSink.end</text>
</g>
<g>
<title>java/util/ArrayList$Itr.hasNext (4 samples, 0.04%)</title><rect x="297.0" y="499.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="300.0" y="510.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.next (13 samples, 0.13%)</title><rect x="297.4" y="499.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="300.4" y="510.0"></text>
</g>
<g>
<title>java/util/ArrayList.sort (2,851 samples, 29.21%)</title><rect x="299.0" y="499.0" width="344.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="302.0" y="510.0">java/util/ArrayList.sort</text>
</g>
<g>
<title>java/util/Arrays.sort (2,851 samples, 29.21%)</title><rect x="299.0" y="483.0" width="344.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="302.0" y="494.0">java/util/Arrays.sort</text>
</g>
<g>
<title>java/util/TimSort.sort (2,850 samples, 29.19%)</title><rect x="299.1" y="467.0" width="344.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="302.1" y="478.0">java/util/TimSort.sort</text>
</g>
<g>
<title>java/util/TimSort.binarySort (466 samples, 4.77%)</title><rect x="300.8" y="451.0" width="56.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="303.8" y="462.0">java/u..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$4/1480010240.compare (62 samples, 0.64%)</title><rect x="339.1" y="435.0" width="7.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="342.1" y="446.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparingInt$7b0bb60$1 (62 samples, 0.64%)</title><rect x="339.1" y="419.0" width="7.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="342.1" y="430.0"></text>
</g>
<g>
<title>demo8/FileConverter3$$Lambda$3/1023892928.applyAsInt (59 samples, 0.60%)</title><rect x="339.1" y="403.0" width="7.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="342.1" y="414.0"></text>
</g>
<g>
<title>java/lang/Integer.compare (3 samples, 0.03%)</title><rect x="346.3" y="403.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="349.3" y="414.0"></text>
</g>
<g>
<title>oop_arraycopy (87 samples, 0.89%)</title><rect x="346.6" y="435.0" width="10.6" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="349.6" y="446.0"></text>
</g>
<g>
<title>java/util/TimSort.countRunAndMakeAscending (20 samples, 0.20%)</title><rect x="357.2" y="451.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="360.2" y="462.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$4/1480010240.compare (9 samples, 0.09%)</title><rect x="358.4" y="435.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="361.4" y="446.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparingInt$7b0bb60$1 (9 samples, 0.09%)</title><rect x="358.4" y="419.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="361.4" y="430.0"></text>
</g>
<g>
<title>demo8/FileConverter3$$Lambda$3/1023892928.applyAsInt (9 samples, 0.09%)</title><rect x="358.4" y="403.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="361.4" y="414.0"></text>
</g>
<g>
<title>java/util/TimSort.mergeCollapse (1,893 samples, 19.39%)</title><rect x="359.6" y="451.0" width="228.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="362.6" y="462.0">java/util/TimSort.mergeCollapse</text>
</g>
<g>
<title>java/util/TimSort.mergeAt (1,882 samples, 19.28%)</title><rect x="360.9" y="435.0" width="227.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="363.9" y="446.0">java/util/TimSort.mergeAt</text>
</g>
<g>
<title>java/util/TimSort.gallopLeft (5 samples, 0.05%)</title><rect x="361.4" y="419.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="364.4" y="430.0"></text>
</g>
<g>
<title>java/util/TimSort.gallopRight (8 samples, 0.08%)</title><rect x="362.0" y="419.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="365.0" y="430.0"></text>
</g>
<g>
<title>java/util/TimSort.mergeHi (491 samples, 5.03%)</title><rect x="363.0" y="419.0" width="59.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="366.0" y="430.0">java/u..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$4/1480010240.compare (40 samples, 0.41%)</title><rect x="416.8" y="403.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="419.8" y="414.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparingInt$7b0bb60$1 (36 samples, 0.37%)</title><rect x="417.2" y="387.0" width="4.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="420.2" y="398.0"></text>
</g>
<g>
<title>demo8/FileConverter3$$Lambda$3/1023892928.applyAsInt (28 samples, 0.29%)</title><rect x="417.7" y="371.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="420.7" y="382.0"></text>
</g>
<g>
<title>demo8/FileConverter3.lambda$convertList$1 (7 samples, 0.07%)</title><rect x="420.3" y="355.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="423.3" y="366.0"></text>
</g>
<g>
<title>java/lang/Integer.compare (4 samples, 0.04%)</title><rect x="421.1" y="371.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="424.1" y="382.0"></text>
</g>
<g>
<title>oop_disjoint_arraycopy (5 samples, 0.05%)</title><rect x="421.7" y="403.0" width="0.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="424.7" y="414.0"></text>
</g>
<g>
<title>java/util/TimSort.mergeLo (1,374 samples, 14.07%)</title><rect x="422.3" y="419.0" width="166.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="425.3" y="430.0">java/util/TimSort.mer..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$4/1480010240.compare (61 samples, 0.62%)</title><rect x="579.5" y="403.0" width="7.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="582.5" y="414.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparingInt$7b0bb60$1 (58 samples, 0.59%)</title><rect x="579.8" y="387.0" width="7.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="582.8" y="398.0"></text>
</g>
<g>
<title>demo8/FileConverter3$$Lambda$3/1023892928.applyAsInt (53 samples, 0.54%)</title><rect x="579.9" y="371.0" width="6.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="582.9" y="382.0"></text>
</g>
<g>
<title>demo8/FileConverter3.lambda$convertList$1 (16 samples, 0.16%)</title><rect x="584.4" y="355.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="587.4" y="366.0"></text>
</g>
<g>
<title>java/lang/Integer.compare (4 samples, 0.04%)</title><rect x="586.3" y="371.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="589.3" y="382.0"></text>
</g>
<g>
<title>java/util/TimSort.ensureCapacity (5 samples, 0.05%)</title><rect x="586.8" y="403.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="589.8" y="414.0"></text>
</g>
<g>
<title>java/lang/reflect/Array.newInstance (3 samples, 0.03%)</title><rect x="587.1" y="387.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="590.1" y="398.0"></text>
</g>
<g>
<title>oop_disjoint_arraycopy (7 samples, 0.07%)</title><rect x="587.5" y="403.0" width="0.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="590.5" y="414.0"></text>
</g>
<g>
<title>java/util/TimSort.mergeForceCollapse (454 samples, 4.65%)</title><rect x="588.4" y="451.0" width="54.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="591.4" y="462.0">java/..</text>
</g>
<g>
<title>java/util/TimSort.mergeAt (454 samples, 4.65%)</title><rect x="588.4" y="435.0" width="54.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="591.4" y="446.0">java/..</text>
</g>
<g>
<title>java/util/TimSort.mergeHi (454 samples, 4.65%)</title><rect x="588.4" y="419.0" width="54.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="591.4" y="430.0">java/..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$4/1480010240.compare (4 samples, 0.04%)</title><rect x="642.7" y="403.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="645.7" y="414.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparingInt$7b0bb60$1 (4 samples, 0.04%)</title><rect x="642.7" y="387.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="645.7" y="398.0"></text>
</g>
<g>
<title>demo8/FileConverter3$$Lambda$3/1023892928.applyAsInt (4 samples, 0.04%)</title><rect x="642.7" y="371.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="645.7" y="382.0"></text>
</g>
<g>
<title>java/util/TimSort.pushRun (3 samples, 0.03%)</title><rect x="643.3" y="451.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="646.3" y="462.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.accept (39 samples, 0.40%)</title><rect x="643.6" y="499.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="646.6" y="510.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$6/668386784.accept (30 samples, 0.31%)</title><rect x="644.7" y="483.0" width="3.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="647.7" y="494.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (28 samples, 0.29%)</title><rect x="645.0" y="467.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="648.0" y="478.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureCapacityInternal (22 samples, 0.23%)</title><rect x="645.7" y="451.0" width="2.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="648.7" y="462.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureExplicitCapacity (21 samples, 0.22%)</title><rect x="645.8" y="435.0" width="2.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="648.8" y="446.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (16 samples, 0.16%)</title><rect x="646.4" y="419.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="649.4" y="430.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (15 samples, 0.15%)</title><rect x="646.5" y="403.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="649.5" y="414.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (15 samples, 0.15%)</title><rect x="646.5" y="387.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="649.5" y="398.0"></text>
</g>
<g>
<title>new_object_array Runtime1 stub (6 samples, 0.06%)</title><rect x="646.9" y="371.0" width="0.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="649.9" y="382.0"></text>
</g>
<g>
<title>oop_disjoint_arraycopy (6 samples, 0.06%)</title><rect x="647.6" y="371.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="650.6" y="382.0"></text>
</g>
<g>
<title>java/util/stream/Sink.cancellationRequested (3 samples, 0.03%)</title><rect x="648.4" y="499.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="651.4" y="510.0"></text>
</g>
<g>
<title>one/profiler/AsyncProfiler.resume (3 samples, 0.03%)</title><rect x="649.3" y="675.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="652.3" y="686.0"></text>
</g>
<g>
<title>one/profiler/AsyncProfiler.start0 (3 samples, 0.03%)</title><rect x="649.3" y="659.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="652.3" y="670.0"></text>
</g>
<g>
<title>__GI_ioctl (3 samples, 0.03%)</title><rect x="649.3" y="643.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="652.3" y="654.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.03%)</title><rect x="649.3" y="627.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="652.3" y="638.0"></text>
</g>
<g>
<title>do_syscall_64 (3 samples, 0.03%)</title><rect x="649.3" y="611.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="652.3" y="622.0"></text>
</g>
<g>
<title>sys_ioctl (3 samples, 0.03%)</title><rect x="649.3" y="595.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="652.3" y="606.0"></text>
</g>
<g>
<title>do_vfs_ioctl (3 samples, 0.03%)</title><rect x="649.3" y="579.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="652.3" y="590.0"></text>
</g>
<g>
<title>perf_ioctl (3 samples, 0.03%)</title><rect x="649.3" y="563.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="652.3" y="574.0"></text>
</g>
<g>
<title>_perf_event_refresh (3 samples, 0.03%)</title><rect x="649.3" y="547.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="652.3" y="558.0"></text>
</g>
<g>
<title>_perf_event_enable (3 samples, 0.03%)</title><rect x="649.3" y="531.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="652.3" y="542.0"></text>
</g>
<g>
<title>event_function_call (3 samples, 0.03%)</title><rect x="649.3" y="515.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="652.3" y="526.0"></text>
</g>
<g>
<title>task_function_call (3 samples, 0.03%)</title><rect x="649.3" y="499.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="652.3" y="510.0"></text>
</g>
<g>
<title>smp_call_function_single (3 samples, 0.03%)</title><rect x="649.3" y="483.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="652.3" y="494.0"></text>
</g>
<g>
<title>generic_exec_single (3 samples, 0.03%)</title><rect x="649.3" y="467.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="652.3" y="478.0"></text>
</g>
<g>
<title>native_send_call_func_single_ipi (3 samples, 0.03%)</title><rect x="649.3" y="451.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="652.3" y="462.0"></text>
</g>
<g>
<title>x2apic_send_IPI (3 samples, 0.03%)</title><rect x="649.3" y="435.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="652.3" y="446.0"></text>
</g>
<g>
<title>native_write_msr (3 samples, 0.03%)</title><rect x="649.3" y="419.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="652.3" y="430.0"></text>
</g>
<g>
<title>start_thread (4,459 samples, 45.68%)</title><rect x="649.9" y="707.0" width="539.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="652.9" y="718.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (4,459 samples, 45.68%)</title><rect x="649.9" y="691.0" width="539.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="652.9" y="702.0">java_start(Thread*)</text>
</g>
<g>
<title>GCTaskThread::run() (3,412 samples, 34.95%)</title><rect x="649.9" y="675.0" width="412.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="652.9" y="686.0">GCTaskThread::run()</text>
</g>
<g>
<title>OldToYoungRootsTask::do_it(GCTaskManager*, unsigned int) (240 samples, 2.46%)</title><rect x="649.9" y="659.0" width="29.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="652.9" y="670.0">Ol..</text>
</g>
<g>
<title>CardTableExtension::scavenge_contents_parallel(ObjectStartArray*, MutableSpace*, HeapWord*, PSPromotionManager*, unsigned int, unsigned int) (240 samples, 2.46%)</title><rect x="649.9" y="643.0" width="29.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="652.9" y="654.0">Ca..</text>
</g>
<g>
<title>ObjArrayKlass::oop_push_contents(PSPromotionManager*, oopDesc*) (21 samples, 0.22%)</title><rect x="650.2" y="627.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="653.2" y="638.0"></text>
</g>
<g>
<title>PSPromotionManager::drain_stacks_depth(bool) (213 samples, 2.18%)</title><rect x="652.8" y="627.0" width="25.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="655.8" y="638.0">P..</text>
</g>
<g>
<title>InstanceKlass::oop_push_contents(PSPromotionManager*, oopDesc*) (4 samples, 0.04%)</title><rect x="656.6" y="611.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="659.6" y="622.0"></text>
</g>
<g>
<title>oopDesc* PSPromotionManager::copy_to_survivor_space&lt;false&gt;(oopDesc*) (177 samples, 1.81%)</title><rect x="657.2" y="611.0" width="21.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="660.2" y="622.0">o..</text>
</g>
<g>
<title>InstanceKlass::oop_push_contents(PSPromotionManager*, oopDesc*) (29 samples, 0.30%)</title><rect x="674.7" y="595.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="677.7" y="606.0"></text>
</g>
<g>
<title>oopDesc* PSPromotionManager::copy_to_survivor_space&lt;false&gt;(oopDesc*) (3 samples, 0.03%)</title><rect x="678.6" y="627.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="681.6" y="638.0"></text>
</g>
<g>
<title>StealTask::do_it(GCTaskManager*, unsigned int) (3,150 samples, 32.27%)</title><rect x="679.1" y="659.0" width="380.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="682.1" y="670.0">StealTask::do_it(GCTaskManager*, unsigned int)</text>
</g>
<g>
<title>PSPromotionManager::drain_stacks_depth(bool) (2,992 samples, 30.65%)</title><rect x="681.8" y="643.0" width="361.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="684.8" y="654.0">PSPromotionManager::drain_stacks_depth(bool)</text>
</g>
<g>
<title>InstanceKlass::oop_push_contents(PSPromotionManager*, oopDesc*) (21 samples, 0.22%)</title><rect x="770.7" y="627.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="773.7" y="638.0"></text>
</g>
<g>
<title>PSPromotionManager::process_array_chunk(oopDesc*) (202 samples, 2.07%)</title><rect x="773.2" y="627.0" width="24.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="776.2" y="638.0">P..</text>
</g>
<g>
<title>void PSPromotionManager::process_array_chunk_work&lt;unsigned int&gt;(oopDesc*, int, int) (198 samples, 2.03%)</title><rect x="773.7" y="611.0" width="23.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="776.7" y="622.0">v..</text>
</g>
<g>
<title>__memmove_ssse3_back (14 samples, 0.14%)</title><rect x="797.6" y="627.0" width="1.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="800.6" y="638.0"></text>
</g>
<g>
<title>oopDesc* PSPromotionManager::copy_to_survivor_space&lt;false&gt;(oopDesc*) (2,019 samples, 20.68%)</title><rect x="799.4" y="627.0" width="244.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="802.4" y="638.0">oopDesc* PSPromotionManager::cop..</text>
</g>
<g>
<title>InstanceKlass::oop_push_contents(PSPromotionManager*, oopDesc*) (299 samples, 3.06%)</title><rect x="981.6" y="611.0" width="36.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="984.6" y="622.0">Ins..</text>
</g>
<g>
<title>MutableSpace::cas_allocate(unsigned long) (4 samples, 0.04%)</title><rect x="1017.8" y="611.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1020.8" y="622.0"></text>
</g>
<g>
<title>PSOldPromotionLAB::flush() (3 samples, 0.03%)</title><rect x="1018.2" y="611.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1021.2" y="622.0"></text>
</g>
<g>
<title>apic_timer_interrupt (4 samples, 0.04%)</title><rect x="1018.7" y="611.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1021.7" y="622.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (4 samples, 0.04%)</title><rect x="1018.7" y="595.0" width="0.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1021.7" y="606.0"></text>
</g>
<g>
<title>irq_exit (4 samples, 0.04%)</title><rect x="1018.7" y="579.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1021.7" y="590.0"></text>
</g>
<g>
<title>__softirqentry_text_start (4 samples, 0.04%)</title><rect x="1018.7" y="563.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1021.7" y="574.0"></text>
</g>
<g>
<title>page_fault (201 samples, 2.06%)</title><rect x="1019.2" y="611.0" width="24.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1022.2" y="622.0">p..</text>
</g>
<g>
<title>do_page_fault (201 samples, 2.06%)</title><rect x="1019.2" y="595.0" width="24.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1022.2" y="606.0">d..</text>
</g>
<g>
<title>__do_page_fault (201 samples, 2.06%)</title><rect x="1019.2" y="579.0" width="24.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1022.2" y="590.0">_..</text>
</g>
<g>
<title>handle_mm_fault (200 samples, 2.05%)</title><rect x="1019.2" y="563.0" width="24.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1022.2" y="574.0">h..</text>
</g>
<g>
<title>__handle_mm_fault (198 samples, 2.03%)</title><rect x="1019.3" y="547.0" width="24.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1022.3" y="558.0">_..</text>
</g>
<g>
<title>do_huge_pmd_anonymous_page (198 samples, 2.03%)</title><rect x="1019.3" y="531.0" width="24.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1022.3" y="542.0">d..</text>
</g>
<g>
<title>alloc_pages_vma (4 samples, 0.04%)</title><rect x="1019.7" y="515.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1022.7" y="526.0"></text>
</g>
<g>
<title>__alloc_pages_nodemask (4 samples, 0.04%)</title><rect x="1019.7" y="499.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1022.7" y="510.0"></text>
</g>
<g>
<title>get_page_from_freelist (4 samples, 0.04%)</title><rect x="1019.7" y="483.0" width="0.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1022.7" y="494.0"></text>
</g>
<g>
<title>arch_local_irq_restore (4 samples, 0.04%)</title><rect x="1019.7" y="467.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1022.7" y="478.0"></text>
</g>
<g>
<title>clear_huge_page (3 samples, 0.03%)</title><rect x="1020.2" y="515.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1023.2" y="526.0"></text>
</g>
<g>
<title>clear_page_orig (184 samples, 1.88%)</title><rect x="1020.5" y="515.0" width="22.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1023.5" y="526.0">c..</text>
</g>
<g>
<title>PSPromotionManager::process_array_chunk(oopDesc*) (98 samples, 1.00%)</title><rect x="1043.5" y="643.0" width="11.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1046.5" y="654.0"></text>
</g>
<g>
<title>void PSPromotionManager::process_array_chunk_work&lt;unsigned int&gt;(oopDesc*, int, int) (91 samples, 0.93%)</title><rect x="1044.3" y="627.0" width="11.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1047.3" y="638.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (5 samples, 0.05%)</title><rect x="1055.3" y="643.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1058.3" y="654.0"></text>
</g>
<g>
<title>SpinPause (12 samples, 0.12%)</title><rect x="1055.9" y="643.0" width="1.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1058.9" y="654.0"></text>
</g>
<g>
<title>oopDesc* PSPromotionManager::copy_to_survivor_space&lt;false&gt;(oopDesc*) (20 samples, 0.20%)</title><rect x="1057.4" y="643.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1060.4" y="654.0"></text>
</g>
<g>
<title>ThreadRootsTask::do_it(GCTaskManager*, unsigned int) (21 samples, 0.22%)</title><rect x="1059.8" y="659.0" width="2.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1062.8" y="670.0"></text>
</g>
<g>
<title>PSPromotionManager::drain_stacks_depth(bool) (19 samples, 0.19%)</title><rect x="1060.1" y="643.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1063.1" y="654.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (19 samples, 0.19%)</title><rect x="1060.1" y="627.0" width="2.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1063.1" y="638.0"></text>
</g>
<g>
<title>page_fault (12 samples, 0.12%)</title><rect x="1060.9" y="611.0" width="1.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1063.9" y="622.0"></text>
</g>
<g>
<title>do_page_fault (12 samples, 0.12%)</title><rect x="1060.9" y="595.0" width="1.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1063.9" y="606.0"></text>
</g>
<g>
<title>__do_page_fault (12 samples, 0.12%)</title><rect x="1060.9" y="579.0" width="1.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1063.9" y="590.0"></text>
</g>
<g>
<title>handle_mm_fault (12 samples, 0.12%)</title><rect x="1060.9" y="563.0" width="1.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1063.9" y="574.0"></text>
</g>
<g>
<title>__handle_mm_fault (12 samples, 0.12%)</title><rect x="1060.9" y="547.0" width="1.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1063.9" y="558.0"></text>
</g>
<g>
<title>do_huge_pmd_anonymous_page (12 samples, 0.12%)</title><rect x="1060.9" y="531.0" width="1.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1063.9" y="542.0"></text>
</g>
<g>
<title>clear_page_orig (12 samples, 0.12%)</title><rect x="1060.9" y="515.0" width="1.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1063.9" y="526.0"></text>
</g>
<g>
<title>JavaThread::run() (1,046 samples, 10.72%)</title><rect x="1062.4" y="675.0" width="126.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1065.4" y="686.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (1,046 samples, 10.72%)</title><rect x="1062.4" y="659.0" width="126.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1065.4" y="670.0">JavaThread::thre..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (1,042 samples, 10.67%)</title><rect x="1062.4" y="643.0" width="125.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1065.4" y="654.0">CompileBroker::..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (1,038 samples, 10.63%)</title><rect x="1062.4" y="627.0" width="125.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1065.4" y="638.0">CompileBroker::..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (960 samples, 9.83%)</title><rect x="1062.4" y="611.0" width="116.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1065.4" y="622.0">C2Compiler::co..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (959 samples, 9.82%)</title><rect x="1062.4" y="595.0" width="115.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1065.4" y="606.0">Compile::Compi..</text>
</g>
<g>
<title>Compile::Code_Gen() (539 samples, 5.52%)</title><rect x="1062.5" y="579.0" width="65.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1065.5" y="590.0">Compile..</text>
</g>
<g>
<title>Compile::Output() (25 samples, 0.26%)</title><rect x="1062.5" y="563.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1065.5" y="574.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (15 samples, 0.15%)</title><rect x="1062.5" y="547.0" width="1.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1065.5" y="558.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (6 samples, 0.06%)</title><rect x="1063.6" y="531.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1066.6" y="542.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (9 samples, 0.09%)</title><rect x="1064.3" y="547.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1067.3" y="558.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (6 samples, 0.06%)</title><rect x="1064.5" y="531.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1067.5" y="542.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (5 samples, 0.05%)</title><rect x="1064.5" y="515.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1067.5" y="526.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (21 samples, 0.22%)</title><rect x="1065.5" y="563.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1068.5" y="574.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (4 samples, 0.04%)</title><rect x="1067.1" y="547.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1070.1" y="558.0"></text>
</g>
<g>
<title>Matcher::match() (47 samples, 0.48%)</title><rect x="1068.5" y="563.0" width="5.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1071.5" y="574.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (8 samples, 0.08%)</title><rect x="1069.1" y="547.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1072.1" y="558.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (31 samples, 0.32%)</title><rect x="1070.1" y="547.0" width="3.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1073.1" y="558.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (24 samples, 0.25%)</title><rect x="1070.8" y="531.0" width="2.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1073.8" y="542.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (13 samples, 0.13%)</title><rect x="1071.5" y="515.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1074.5" y="526.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (8 samples, 0.08%)</title><rect x="1071.8" y="499.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1074.8" y="510.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (4 samples, 0.04%)</title><rect x="1072.1" y="483.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1075.1" y="494.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (3 samples, 0.03%)</title><rect x="1072.3" y="467.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1075.3" y="478.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (5 samples, 0.05%)</title><rect x="1073.1" y="515.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1076.1" y="526.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (3 samples, 0.03%)</title><rect x="1074.2" y="563.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1077.2" y="574.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (41 samples, 0.42%)</title><rect x="1074.8" y="563.0" width="5.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1077.8" y="574.0"></text>
</g>
<g>
<title>PhaseCFG::build_dominator_tree() (3 samples, 0.03%)</title><rect x="1074.8" y="547.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1077.8" y="558.0"></text>
</g>
<g>
<title>PhaseCFG::do_DFS(Tarjan*, unsigned int) (3 samples, 0.03%)</title><rect x="1074.8" y="531.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1077.8" y="542.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (38 samples, 0.39%)</title><rect x="1075.2" y="547.0" width="4.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1078.2" y="558.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (6 samples, 0.06%)</title><rect x="1075.7" y="531.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1078.7" y="542.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (13 samples, 0.13%)</title><rect x="1076.4" y="531.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1079.4" y="542.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (3 samples, 0.03%)</title><rect x="1076.5" y="515.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1079.5" y="526.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (5 samples, 0.05%)</title><rect x="1077.0" y="515.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1080.0" y="526.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (3 samples, 0.03%)</title><rect x="1077.6" y="515.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1080.6" y="526.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (10 samples, 0.10%)</title><rect x="1077.9" y="531.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1080.9" y="542.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (392 samples, 4.02%)</title><rect x="1080.1" y="563.0" width="47.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1083.1" y="574.0">Phas..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.03%)</title><rect x="1081.1" y="547.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1084.1" y="558.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (9 samples, 0.09%)</title><rect x="1082.1" y="547.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1085.1" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (29 samples, 0.30%)</title><rect x="1083.1" y="547.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1086.1" y="558.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (5 samples, 0.05%)</title><rect x="1084.6" y="531.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1087.6" y="542.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (3 samples, 0.03%)</title><rect x="1085.2" y="531.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1088.2" y="542.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (9 samples, 0.09%)</title><rect x="1085.6" y="531.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1088.6" y="542.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.03%)</title><rect x="1086.3" y="515.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1089.3" y="526.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (21 samples, 0.22%)</title><rect x="1086.7" y="547.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1089.7" y="558.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.03%)</title><rect x="1087.3" y="531.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1090.3" y="542.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (12 samples, 0.12%)</title><rect x="1087.6" y="531.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1090.6" y="542.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (5 samples, 0.05%)</title><rect x="1088.5" y="515.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1091.5" y="526.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (36 samples, 0.37%)</title><rect x="1089.2" y="547.0" width="4.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1092.2" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (90 samples, 0.92%)</title><rect x="1093.5" y="547.0" width="10.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1096.5" y="558.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (8 samples, 0.08%)</title><rect x="1097.0" y="531.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1100.0" y="542.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (4 samples, 0.04%)</title><rect x="1098.0" y="531.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1101.0" y="542.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (37 samples, 0.38%)</title><rect x="1098.6" y="531.0" width="4.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1101.6" y="542.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (17 samples, 0.17%)</title><rect x="1100.9" y="515.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1103.9" y="526.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (5 samples, 0.05%)</title><rect x="1103.6" y="531.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1106.6" y="542.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (9 samples, 0.09%)</title><rect x="1104.4" y="547.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1107.4" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (7 samples, 0.07%)</title><rect x="1104.7" y="531.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1107.7" y="542.0"></text>
</g>
<g>
<title>PhaseChaitin::de_ssa() (3 samples, 0.03%)</title><rect x="1105.6" y="547.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1108.6" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (32 samples, 0.33%)</title><rect x="1106.1" y="547.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1109.1" y="558.0"></text>
</g>
<g>
<title>RegMask::Size() const (8 samples, 0.08%)</title><rect x="1108.5" y="531.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1111.5" y="542.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.83] (6 samples, 0.06%)</title><rect x="1110.0" y="547.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1113.0" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (4 samples, 0.04%)</title><rect x="1110.7" y="547.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1113.7" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (26 samples, 0.27%)</title><rect x="1111.2" y="547.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1114.2" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (13 samples, 0.13%)</title><rect x="1112.6" y="531.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1115.6" y="542.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (4 samples, 0.04%)</title><rect x="1114.3" y="547.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1117.3" y="558.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (12 samples, 0.12%)</title><rect x="1114.8" y="547.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1117.8" y="558.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (3 samples, 0.03%)</title><rect x="1114.8" y="531.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1117.8" y="542.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (8 samples, 0.08%)</title><rect x="1115.2" y="531.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1118.2" y="542.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (3 samples, 0.03%)</title><rect x="1115.5" y="515.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1118.5" y="526.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (17 samples, 0.17%)</title><rect x="1116.3" y="547.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1119.3" y="558.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (7 samples, 0.07%)</title><rect x="1117.5" y="531.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1120.5" y="542.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (17 samples, 0.17%)</title><rect x="1118.3" y="547.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1121.3" y="558.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (11 samples, 0.11%)</title><rect x="1118.9" y="531.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1121.9" y="542.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (42 samples, 0.43%)</title><rect x="1120.6" y="547.0" width="5.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1123.6" y="558.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (22 samples, 0.23%)</title><rect x="1122.7" y="531.0" width="2.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1125.7" y="542.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (12 samples, 0.12%)</title><rect x="1123.9" y="515.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1126.9" y="526.0"></text>
</g>
<g>
<title>__GI___pthread_getspecific (3 samples, 0.03%)</title><rect x="1125.3" y="531.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1128.3" y="542.0"></text>
</g>
<g>
<title>Compile::Optimize() (307 samples, 3.14%)</title><rect x="1127.6" y="579.0" width="37.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1130.6" y="590.0">Com..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (6 samples, 0.06%)</title><rect x="1127.7" y="563.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1130.7" y="574.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (6 samples, 0.06%)</title><rect x="1127.7" y="547.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1130.7" y="558.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) [clone .part.229] (3 samples, 0.03%)</title><rect x="1128.5" y="563.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1131.5" y="574.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (16 samples, 0.16%)</title><rect x="1129.2" y="563.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1132.2" y="574.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (9 samples, 0.09%)</title><rect x="1131.1" y="563.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1134.1" y="574.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (9 samples, 0.09%)</title><rect x="1131.1" y="547.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1134.1" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (222 samples, 2.27%)</title><rect x="1132.3" y="563.0" width="26.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1135.3" y="574.0">P..</text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (3 samples, 0.03%)</title><rect x="1132.6" y="547.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1135.6" y="558.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (3 samples, 0.03%)</title><rect x="1132.6" y="531.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1135.6" y="542.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (10 samples, 0.10%)</title><rect x="1132.9" y="547.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1135.9" y="558.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (5 samples, 0.05%)</title><rect x="1132.9" y="531.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1135.9" y="542.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (4 samples, 0.04%)</title><rect x="1133.1" y="515.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1136.1" y="526.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_peeling(IdealLoopTree*, Node_List&amp;) (3 samples, 0.03%)</title><rect x="1133.1" y="499.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1136.1" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, Node*) (3 samples, 0.03%)</title><rect x="1133.1" y="483.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1136.1" y="494.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (5 samples, 0.05%)</title><rect x="1133.6" y="531.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1136.6" y="542.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (3 samples, 0.03%)</title><rect x="1134.2" y="547.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1137.2" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) [clone .part.49] (3 samples, 0.03%)</title><rect x="1134.2" y="531.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1137.2" y="542.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (4 samples, 0.04%)</title><rect x="1134.6" y="547.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1137.6" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (26 samples, 0.27%)</title><rect x="1135.4" y="547.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1138.4" y="558.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (10 samples, 0.10%)</title><rect x="1137.2" y="531.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1140.2" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (31 samples, 0.32%)</title><rect x="1138.5" y="547.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1141.5" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (4 samples, 0.04%)</title><rect x="1141.8" y="531.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1144.8" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (60 samples, 0.61%)</title><rect x="1142.3" y="547.0" width="7.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1145.3" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (28 samples, 0.29%)</title><rect x="1146.1" y="531.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1149.1" y="542.0"></text>
</g>
<g>
<title>Node::unique_ctrl_out() (3 samples, 0.03%)</title><rect x="1147.0" y="515.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1150.0" y="526.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (3 samples, 0.03%)</title><rect x="1147.3" y="515.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1150.3" y="526.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (15 samples, 0.15%)</title><rect x="1147.7" y="515.0" width="1.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1150.7" y="526.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (8 samples, 0.08%)</title><rect x="1148.1" y="499.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1151.1" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (7 samples, 0.07%)</title><rect x="1148.2" y="483.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1151.2" y="494.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (3 samples, 0.03%)</title><rect x="1149.0" y="499.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1152.0" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (10 samples, 0.10%)</title><rect x="1149.6" y="547.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.6" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::eliminate_useless_predicates() [clone .part.123] (4 samples, 0.04%)</title><rect x="1150.8" y="547.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1153.8" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::collect_potentially_useful_predicates(IdealLoopTree*, Unique_Node_List&amp;) (4 samples, 0.04%)</title><rect x="1150.8" y="531.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1153.8" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::find_predicate(Node*) (3 samples, 0.03%)</title><rect x="1151.0" y="515.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1154.0" y="526.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (25 samples, 0.26%)</title><rect x="1151.6" y="547.0" width="3.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1154.6" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (3 samples, 0.03%)</title><rect x="1152.8" y="531.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1155.8" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (12 samples, 0.12%)</title><rect x="1153.1" y="531.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.1" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (4 samples, 0.04%)</title><rect x="1154.0" y="515.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1157.0" y="526.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (34 samples, 0.35%)</title><rect x="1154.6" y="547.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1157.6" y="558.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (29 samples, 0.30%)</title><rect x="1155.2" y="531.0" width="3.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1158.2" y="542.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (3 samples, 0.03%)</title><rect x="1156.0" y="515.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1159.0" y="526.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (3 samples, 0.03%)</title><rect x="1156.4" y="515.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1159.4" y="526.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (5 samples, 0.05%)</title><rect x="1156.8" y="515.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1159.8" y="526.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (3 samples, 0.03%)</title><rect x="1157.0" y="499.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1160.0" y="510.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (3 samples, 0.03%)</title><rect x="1157.5" y="515.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1160.5" y="526.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (5 samples, 0.05%)</title><rect x="1157.8" y="515.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.8" y="526.0"></text>
</g>
<g>
<title>__memset_sse2 (3 samples, 0.03%)</title><rect x="1158.8" y="547.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1161.8" y="558.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (38 samples, 0.39%)</title><rect x="1159.3" y="563.0" width="4.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.3" y="574.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (35 samples, 0.36%)</title><rect x="1159.7" y="547.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.7" y="558.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (3 samples, 0.03%)</title><rect x="1160.4" y="531.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.4" y="542.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (3 samples, 0.03%)</title><rect x="1161.0" y="531.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.0" y="542.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (5 samples, 0.05%)</title><rect x="1162.2" y="531.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1165.2" y="542.0"></text>
</g>
<g>
<title>__memset_sse2 (4 samples, 0.04%)</title><rect x="1164.3" y="563.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1167.3" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (90 samples, 0.92%)</title><rect x="1165.0" y="579.0" width="10.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1168.0" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (90 samples, 0.92%)</title><rect x="1165.0" y="563.0" width="10.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1168.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (86 samples, 0.88%)</title><rect x="1165.0" y="547.0" width="10.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.0" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (83 samples, 0.85%)</title><rect x="1165.1" y="531.0" width="10.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1168.1" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (81 samples, 0.83%)</title><rect x="1165.2" y="515.0" width="9.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1168.2" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (66 samples, 0.68%)</title><rect x="1165.6" y="499.0" width="8.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.6" y="510.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (4 samples, 0.04%)</title><rect x="1165.6" y="483.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1168.6" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (18 samples, 0.18%)</title><rect x="1166.9" y="483.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.9" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (18 samples, 0.18%)</title><rect x="1166.9" y="467.0" width="2.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1169.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (18 samples, 0.18%)</title><rect x="1166.9" y="451.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1169.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (18 samples, 0.18%)</title><rect x="1166.9" y="435.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (17 samples, 0.17%)</title><rect x="1167.0" y="419.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (15 samples, 0.15%)</title><rect x="1167.2" y="403.0" width="1.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1170.2" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (13 samples, 0.13%)</title><rect x="1167.4" y="387.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.4" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (13 samples, 0.13%)</title><rect x="1167.4" y="371.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.4" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (12 samples, 0.12%)</title><rect x="1167.4" y="355.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.4" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (12 samples, 0.12%)</title><rect x="1167.4" y="339.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1170.4" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (12 samples, 0.12%)</title><rect x="1167.4" y="323.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.4" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (10 samples, 0.10%)</title><rect x="1167.6" y="307.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1170.6" y="318.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (3 samples, 0.03%)</title><rect x="1167.6" y="291.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.6" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.04%)</title><rect x="1168.1" y="291.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.1" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.04%)</title><rect x="1168.1" y="275.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.1" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.04%)</title><rect x="1168.1" y="259.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1171.1" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.04%)</title><rect x="1168.1" y="243.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1171.1" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.04%)</title><rect x="1168.1" y="227.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.1" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.04%)</title><rect x="1168.1" y="211.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.1" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.03%)</title><rect x="1168.1" y="195.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1171.1" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.03%)</title><rect x="1168.1" y="179.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1171.1" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.03%)</title><rect x="1168.1" y="163.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1171.1" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.03%)</title><rect x="1168.1" y="147.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1171.1" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.03%)</title><rect x="1168.1" y="131.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.1" y="142.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.03%)</title><rect x="1168.1" y="115.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.1" y="126.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.03%)</title><rect x="1168.1" y="99.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.1" y="110.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.03%)</title><rect x="1168.1" y="83.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.1" y="94.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.03%)</title><rect x="1168.1" y="67.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.1" y="78.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.03%)</title><rect x="1168.1" y="51.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.1" y="62.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.03%)</title><rect x="1168.1" y="35.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.1" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (35 samples, 0.36%)</title><rect x="1169.1" y="483.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.1" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (33 samples, 0.34%)</title><rect x="1169.3" y="467.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.3" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (33 samples, 0.34%)</title><rect x="1169.3" y="451.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.3" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (33 samples, 0.34%)</title><rect x="1169.3" y="435.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.3" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (33 samples, 0.34%)</title><rect x="1169.3" y="419.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.3" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (32 samples, 0.33%)</title><rect x="1169.5" y="403.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.5" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (28 samples, 0.29%)</title><rect x="1169.5" y="387.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.5" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (13 samples, 0.13%)</title><rect x="1169.5" y="371.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.5" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (13 samples, 0.13%)</title><rect x="1169.5" y="355.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1172.5" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (12 samples, 0.12%)</title><rect x="1169.6" y="339.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1172.6" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (12 samples, 0.12%)</title><rect x="1169.6" y="323.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.6" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (12 samples, 0.12%)</title><rect x="1169.6" y="307.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (9 samples, 0.09%)</title><rect x="1169.6" y="291.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.6" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.07%)</title><rect x="1169.6" y="275.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.6" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.07%)</title><rect x="1169.6" y="259.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.6" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.06%)</title><rect x="1169.6" y="243.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.6" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.05%)</title><rect x="1169.7" y="227.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.7" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.05%)</title><rect x="1169.7" y="211.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.7" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.03%)</title><rect x="1169.8" y="195.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.8" y="206.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (15 samples, 0.15%)</title><rect x="1171.0" y="371.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.0" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (11 samples, 0.11%)</title><rect x="1171.1" y="355.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.1" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (11 samples, 0.11%)</title><rect x="1171.1" y="339.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.1" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (11 samples, 0.11%)</title><rect x="1171.1" y="323.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.1" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (11 samples, 0.11%)</title><rect x="1171.1" y="307.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.1" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (11 samples, 0.11%)</title><rect x="1171.1" y="291.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.1" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (9 samples, 0.09%)</title><rect x="1171.1" y="275.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.1" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.03%)</title><rect x="1171.3" y="259.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.3" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.03%)</title><rect x="1171.3" y="243.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1174.3" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.03%)</title><rect x="1171.3" y="227.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.3" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.03%)</title><rect x="1171.3" y="211.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1174.3" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.03%)</title><rect x="1171.3" y="195.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.3" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.03%)</title><rect x="1171.3" y="179.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.3" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.03%)</title><rect x="1171.3" y="163.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.3" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.03%)</title><rect x="1171.3" y="147.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.3" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.03%)</title><rect x="1171.3" y="131.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.3" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.03%)</title><rect x="1171.3" y="115.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.3" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.03%)</title><rect x="1171.3" y="99.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1174.3" y="110.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (5 samples, 0.05%)</title><rect x="1171.6" y="259.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.6" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.04%)</title><rect x="1171.6" y="243.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.6" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.04%)</title><rect x="1171.6" y="227.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.6" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.04%)</title><rect x="1171.6" y="211.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.6" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.04%)</title><rect x="1171.6" y="195.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.6" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.04%)</title><rect x="1171.6" y="179.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.6" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.04%)</title><rect x="1171.6" y="163.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.6" y="174.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (3 samples, 0.03%)</title><rect x="1173.6" y="499.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (6 samples, 0.06%)</title><rect x="1173.9" y="499.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.9" y="510.0"></text>
</g>
<g>
<title>PreserveJVMState::PreserveJVMState(GraphKit*, bool) (3 samples, 0.03%)</title><rect x="1174.2" y="483.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.2" y="494.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (3 samples, 0.03%)</title><rect x="1174.2" y="467.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.2" y="478.0"></text>
</g>
<g>
<title>Parse::load_interpreter_state(Node*) (3 samples, 0.03%)</title><rect x="1175.4" y="547.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.4" y="558.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (10 samples, 0.10%)</title><rect x="1175.9" y="579.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.9" y="590.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (4 samples, 0.04%)</title><rect x="1175.9" y="563.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.9" y="574.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (5 samples, 0.05%)</title><rect x="1176.3" y="563.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.3" y="574.0"></text>
</g>
<g>
<title>Type::Initialize(Compile*) (3 samples, 0.03%)</title><rect x="1177.1" y="579.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.1" y="590.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (3 samples, 0.03%)</title><rect x="1177.1" y="563.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.1" y="574.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (6 samples, 0.06%)</title><rect x="1177.4" y="579.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.4" y="590.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (3 samples, 0.03%)</title><rect x="1177.4" y="563.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.4" y="574.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (3 samples, 0.03%)</title><rect x="1177.4" y="547.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.4" y="558.0"></text>
</g>
<g>
<title>nmethod::post_compiled_method_load_event() (3 samples, 0.03%)</title><rect x="1177.8" y="563.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.8" y="574.0"></text>
</g>
<g>
<title>__pthread_cond_signal (3 samples, 0.03%)</title><rect x="1177.8" y="547.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1180.8" y="558.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.03%)</title><rect x="1177.8" y="531.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1180.8" y="542.0"></text>
</g>
<g>
<title>do_syscall_64 (3 samples, 0.03%)</title><rect x="1177.8" y="515.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1180.8" y="526.0"></text>
</g>
<g>
<title>sys_futex (3 samples, 0.03%)</title><rect x="1177.8" y="499.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1180.8" y="510.0"></text>
</g>
<g>
<title>do_futex (3 samples, 0.03%)</title><rect x="1177.8" y="483.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1180.8" y="494.0"></text>
</g>
<g>
<title>wake_up_q (3 samples, 0.03%)</title><rect x="1177.8" y="467.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1180.8" y="478.0"></text>
</g>
<g>
<title>try_to_wake_up (3 samples, 0.03%)</title><rect x="1177.8" y="451.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1180.8" y="462.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (3 samples, 0.03%)</title><rect x="1177.8" y="435.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1180.8" y="446.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (72 samples, 0.74%)</title><rect x="1178.5" y="611.0" width="8.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.5" y="622.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (72 samples, 0.74%)</title><rect x="1178.5" y="595.0" width="8.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.5" y="606.0"></text>
</g>
<g>
<title>Compilation::compile_method() (72 samples, 0.74%)</title><rect x="1178.5" y="579.0" width="8.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.5" y="590.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (68 samples, 0.70%)</title><rect x="1178.5" y="563.0" width="8.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.5" y="574.0"></text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.78] (24 samples, 0.25%)</title><rect x="1178.5" y="547.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.5" y="558.0"></text>
</g>
<g>
<title>GlobalValueNumbering::GlobalValueNumbering(IR*) (4 samples, 0.04%)</title><rect x="1178.5" y="531.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.5" y="542.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (15 samples, 0.15%)</title><rect x="1179.0" y="531.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.0" y="542.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (15 samples, 0.15%)</title><rect x="1179.0" y="515.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.0" y="526.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (15 samples, 0.15%)</title><rect x="1179.0" y="499.0" width="1.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.0" y="510.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (12 samples, 0.12%)</title><rect x="1179.4" y="483.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.4" y="494.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (12 samples, 0.12%)</title><rect x="1179.4" y="467.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.4" y="478.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (9 samples, 0.09%)</title><rect x="1179.7" y="451.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.7" y="462.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (5 samples, 0.05%)</title><rect x="1179.7" y="435.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.7" y="446.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (4 samples, 0.04%)</title><rect x="1179.7" y="419.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.7" y="430.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (4 samples, 0.04%)</title><rect x="1179.7" y="403.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.7" y="414.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (4 samples, 0.04%)</title><rect x="1179.7" y="387.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.7" y="398.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (4 samples, 0.04%)</title><rect x="1179.7" y="371.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.7" y="382.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (4 samples, 0.04%)</title><rect x="1179.7" y="355.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.7" y="366.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (4 samples, 0.04%)</title><rect x="1179.7" y="339.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.7" y="350.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (3 samples, 0.03%)</title><rect x="1179.7" y="323.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.7" y="334.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (3 samples, 0.03%)</title><rect x="1179.7" y="307.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.7" y="318.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (3 samples, 0.03%)</title><rect x="1179.7" y="291.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.7" y="302.0"></text>
</g>
<g>
<title>IR::eliminate_null_checks() (3 samples, 0.03%)</title><rect x="1180.8" y="531.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.8" y="542.0"></text>
</g>
<g>
<title>Optimizer::eliminate_null_checks() (3 samples, 0.03%)</title><rect x="1180.8" y="515.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.8" y="526.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (13 samples, 0.13%)</title><rect x="1181.4" y="547.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.4" y="558.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (12 samples, 0.12%)</title><rect x="1181.4" y="531.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.4" y="542.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_call(LIR_OpJavaCall*) (3 samples, 0.03%)</title><rect x="1181.4" y="515.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.4" y="526.0"></text>
</g>
<g>
<title>LIR_Assembler::add_call_info(int, CodeEmitInfo*) (3 samples, 0.03%)</title><rect x="1181.4" y="499.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.4" y="510.0"></text>
</g>
<g>
<title>LIR_Assembler::process_debug_info(LIR_Op*) (3 samples, 0.03%)</title><rect x="1182.3" y="515.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.3" y="526.0"></text>
</g>
<g>
<title>LIR_Assembler::record_non_safepoint_debug_info() (3 samples, 0.03%)</title><rect x="1182.3" y="499.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.3" y="510.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (30 samples, 0.31%)</title><rect x="1183.0" y="547.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.0" y="558.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (6 samples, 0.06%)</title><rect x="1183.0" y="531.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.0" y="542.0"></text>
</g>
<g>
<title>non-virtual thunk to LIRGenerator::block_do(BlockBegin*) (6 samples, 0.06%)</title><rect x="1183.0" y="515.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.0" y="526.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (24 samples, 0.25%)</title><rect x="1183.7" y="531.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.7" y="542.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (8 samples, 0.08%)</title><rect x="1183.7" y="515.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.7" y="526.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) [clone .constprop.203] (8 samples, 0.08%)</title><rect x="1183.7" y="499.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.7" y="510.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (5 samples, 0.05%)</title><rect x="1184.0" y="483.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.0" y="494.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (7 samples, 0.07%)</title><rect x="1184.9" y="515.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.9" y="526.0"></text>
</g>
<g>
<title>LinearScan::compute_local_live_sets() (3 samples, 0.03%)</title><rect x="1185.9" y="515.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.9" y="526.0"></text>
</g>
<g>
<title>CompileQueue::get() (4 samples, 0.04%)</title><rect x="1187.8" y="627.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.8" y="638.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (3 samples, 0.03%)</title><rect x="1187.9" y="611.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.9" y="622.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (3 samples, 0.03%)</title><rect x="1187.9" y="595.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.9" y="606.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (4 samples, 0.04%)</title><rect x="1188.3" y="643.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1191.3" y="654.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (4 samples, 0.04%)</title><rect x="1188.3" y="627.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.3" y="638.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (4 samples, 0.04%)</title><rect x="1188.3" y="611.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.3" y="622.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (4 samples, 0.04%)</title><rect x="1188.3" y="595.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1191.3" y="606.0"></text>
</g>
<g>
<title>sysmalloc (9 samples, 0.09%)</title><rect x="1188.9" y="707.0" width="1.1" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1191.9" y="718.0"></text>
</g>
<g>
<title>page_fault (8 samples, 0.08%)</title><rect x="1189.0" y="691.0" width="1.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1192.0" y="702.0"></text>
</g>
<g>
<title>do_page_fault (8 samples, 0.08%)</title><rect x="1189.0" y="675.0" width="1.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1192.0" y="686.0"></text>
</g>
<g>
<title>__do_page_fault (8 samples, 0.08%)</title><rect x="1189.0" y="659.0" width="1.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1192.0" y="670.0"></text>
</g>
<g>
<title>handle_mm_fault (7 samples, 0.07%)</title><rect x="1189.2" y="643.0" width="0.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1192.2" y="654.0"></text>
</g>
<g>
<title>__handle_mm_fault (6 samples, 0.06%)</title><rect x="1189.3" y="627.0" width="0.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1192.3" y="638.0"></text>
</g>
<g>
<title>do_anonymous_page (6 samples, 0.06%)</title><rect x="1189.3" y="611.0" width="0.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1192.3" y="622.0"></text>
</g>
<g>
<title>alloc_pages_vma (3 samples, 0.03%)</title><rect x="1189.3" y="595.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1192.3" y="606.0"></text>
</g>
<g>
<title>__alloc_pages_nodemask (3 samples, 0.03%)</title><rect x="1189.3" y="579.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1192.3" y="590.0"></text>
</g>
<g>
<title>clear_page_orig (3 samples, 0.03%)</title><rect x="1189.3" y="563.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1192.3" y="574.0"></text>
</g>
<g>
<title>lru_cache_add_active_or_unevictable (3 samples, 0.03%)</title><rect x="1189.6" y="595.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1192.6" y="606.0"></text>
</g>
<g>
<title>__lru_cache_add (3 samples, 0.03%)</title><rect x="1189.6" y="579.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1192.6" y="590.0"></text>
</g>
<g>
<title>pagevec_lru_move_fn (3 samples, 0.03%)</title><rect x="1189.6" y="563.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1192.6" y="574.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (3 samples, 0.03%)</title><rect x="1189.6" y="547.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1192.6" y="558.0"></text>
</g>
</g>
</svg>
